#!/usr/bin/env python
import sys,time,argparse

def main(args):
	sys.stdout.write("Start analysis: " + time.strftime("%a,%d %b %Y %H:%M:%S") + "\n")
	sys.stdout.flush()
	split_fusion_gpd(args.input,args.output_prefix)
	sys.stdout.write("Finish analysis: " + time.strftime("%a,%d %b %Y %H:%M:%S") + "\n")
	sys.stdout.flush()

def split_fusion_gpd(input_gpd,output_prefix):
	output_fs = open(output_prefix+".FS.gpd","w")
	output_fm = open(output_prefix+".FM.gpd","w")
	output_ss = open(output_prefix+".SS.gpd","w")
	output_sm = open(output_prefix+".SM.gpd","w")
	for line in input_gpd:
		qname = line.strip().split("\t")[0]
		first_part = line.strip().split("\t")[1:10]
		second_part = line.strip().split("\t")[10:]
		if int(first_part[6]) == 1:
			output_fs.write(qname+"\t"+qname+"\t"+"\t".join(first_part)+"\n")
		else:
			output_fm.write(qname+"\t"+qname+"\t"+"\t".join(first_part)+"\n")
		if int(second_part[6]) == 1:
			output_ss.write(qname+"\t"+qname+"\t"+"\t".join(second_part)+"\n")
		else:
			output_sm.write(qname+"\t"+qname+"\t"+"\t".join(second_part)+"\n")
	input_gpd.close()
	output_fs.close()
	output_fm.close()
	output_ss.close()
	output_sm.close()
	
def do_inputs():
	parser = argparse.ArgumentParser(description="Function: split fusion gpd file into 4 files including 1) first part, singleton alignment; 2) first part, multi-exon alignment; 3) second part, singleton alignment; and 4) second part, multi-exon alignment.",formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	parser.add_argument('-i','--input',type=argparse.FileType('r'),required=True,help="Input: fusion-specific gpd file generated by 'py_isoseqfusion_make_fusion_gpd.py'")
	parser.add_argument('-p','--output_prefix',type=str,default="isoseqfus",help="Output prefix")
	args = parser.parse_args()
	return args

if __name__=="__main__":
	args = do_inputs()
	main(args)
